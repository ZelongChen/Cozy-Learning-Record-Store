// Generated by CoffeeScript 1.8.0
(function() {
  var getIndexType, getIndexerOptions;

  getIndexType = function(type) {
    var indexTransform, itemIndexRule, _ref;
    if (type.type && !type.indexType) {
      type = type.type;
    }
    if (type.indexType) {
      return {
        indexType: type.indexType,
        indexTransform: type.indexTransform
      };
    } else if (type === String) {
      return {
        indexType: 'text',
        indexTransform: null
      };
    } else if (type === Date) {
      return {
        indexType: 'date',
        indexTransform: null
      };
    } else if (type === Number) {
      return {
        indexType: 'number',
        indexTransform: null
      };
    } else if (type === Boolean) {
      return {
        indexType: 'boolean',
        indexTransform: null
      };
    } else if (Array.isArray(type) && type.length === 1) {
      itemIndexRule = getIndexType(type[0]);
      if ((_ref = itemIndexRule != null ? itemIndexRule.indexType : void 0) === 'string' || _ref === 'text') {
        indexTransform = itemIndexRule.indexTransform ? function(data) {
          return data.map(itemIndexRule.indexTransform).join(' ');
        } : function(data) {
          return data.join(' ');
        };
        return {
          indexType: itemIndexRule != null ? itemIndexRule.indexType : void 0,
          indexTransform: indexTransform
        };
      } else {
        return void 0;
      }
    } else {
      return void 0;
    }
  };

  getIndexerOptions = function(Model) {
    var field, fieldsType, rule, transformers, _i, _len, _ref;
    if (Model.__indexerOptions) {
      return Model.__indexerOptions;
    }
    fieldsType = {};
    transformers = {};
    _ref = Model.indexedFields;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      field = _ref[_i];
      rule = getIndexType(Model.schema[field]);
      if (!rule) {
        throw new Error("dont know how to index field " + field);
      }
      fieldsType[field] = rule.indexType;
      if (rule.indexTransform) {
        transformers[field] = rule.indexTransform;
      }
    }
    return Model.__indexerOptions = {
      fieldsType: fieldsType,
      transformers: transformers
    };
  };

  exports.getIndexOptions = function(Model, data) {
    var definition, field, indexerOptions, key, mappedValues, options, transform, _ref, _ref1;
    indexerOptions = getIndexerOptions(Model);
    mappedValues = {};
    _ref = indexerOptions.transformers;
    for (field in _ref) {
      transform = _ref[field];
      mappedValues[field] = transform(data[field]);
    }
    _ref1 = Model.computedIndexes || {};
    for (key in _ref1) {
      definition = _ref1[key];
      fieldsType[key] = definition.indexType;
      mappedValues[key] = definition.indexTransform(data);
    }
    return options = {
      fields: Model.indexedFields,
      fieldsType: indexerOptions.fieldsType,
      mappedValues: mappedValues
    };
  };

}).call(this);
